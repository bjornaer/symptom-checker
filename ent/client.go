// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/bjornaer/sympton-checker/ent/migrate"

	"github.com/bjornaer/sympton-checker/ent/ailment"
	"github.com/bjornaer/sympton-checker/ent/symptom"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ailment is the client for interacting with the Ailment builders.
	Ailment *AilmentClient
	// Symptom is the client for interacting with the Symptom builders.
	Symptom *SymptomClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ailment = NewAilmentClient(c.config)
	c.Symptom = NewSymptomClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Ailment: NewAilmentClient(cfg),
		Symptom: NewSymptomClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Ailment: NewAilmentClient(cfg),
		Symptom: NewSymptomClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ailment.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Ailment.Use(hooks...)
	c.Symptom.Use(hooks...)
}

// AilmentClient is a client for the Ailment schema.
type AilmentClient struct {
	config
}

// NewAilmentClient returns a client for the Ailment from the given config.
func NewAilmentClient(c config) *AilmentClient {
	return &AilmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ailment.Hooks(f(g(h())))`.
func (c *AilmentClient) Use(hooks ...Hook) {
	c.hooks.Ailment = append(c.hooks.Ailment, hooks...)
}

// Create returns a create builder for Ailment.
func (c *AilmentClient) Create() *AilmentCreate {
	mutation := newAilmentMutation(c.config, OpCreate)
	return &AilmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ailment entities.
func (c *AilmentClient) CreateBulk(builders ...*AilmentCreate) *AilmentCreateBulk {
	return &AilmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ailment.
func (c *AilmentClient) Update() *AilmentUpdate {
	mutation := newAilmentMutation(c.config, OpUpdate)
	return &AilmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AilmentClient) UpdateOne(a *Ailment) *AilmentUpdateOne {
	mutation := newAilmentMutation(c.config, OpUpdateOne, withAilment(a))
	return &AilmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AilmentClient) UpdateOneID(id int) *AilmentUpdateOne {
	mutation := newAilmentMutation(c.config, OpUpdateOne, withAilmentID(id))
	return &AilmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ailment.
func (c *AilmentClient) Delete() *AilmentDelete {
	mutation := newAilmentMutation(c.config, OpDelete)
	return &AilmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AilmentClient) DeleteOne(a *Ailment) *AilmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AilmentClient) DeleteOneID(id int) *AilmentDeleteOne {
	builder := c.Delete().Where(ailment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AilmentDeleteOne{builder}
}

// Query returns a query builder for Ailment.
func (c *AilmentClient) Query() *AilmentQuery {
	return &AilmentQuery{
		config: c.config,
	}
}

// Get returns a Ailment entity by its id.
func (c *AilmentClient) Get(ctx context.Context, id int) (*Ailment, error) {
	return c.Query().Where(ailment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AilmentClient) GetX(ctx context.Context, id int) *Ailment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AilmentClient) Hooks() []Hook {
	return c.hooks.Ailment
}

// SymptomClient is a client for the Symptom schema.
type SymptomClient struct {
	config
}

// NewSymptomClient returns a client for the Symptom from the given config.
func NewSymptomClient(c config) *SymptomClient {
	return &SymptomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `symptom.Hooks(f(g(h())))`.
func (c *SymptomClient) Use(hooks ...Hook) {
	c.hooks.Symptom = append(c.hooks.Symptom, hooks...)
}

// Create returns a create builder for Symptom.
func (c *SymptomClient) Create() *SymptomCreate {
	mutation := newSymptomMutation(c.config, OpCreate)
	return &SymptomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Symptom entities.
func (c *SymptomClient) CreateBulk(builders ...*SymptomCreate) *SymptomCreateBulk {
	return &SymptomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Symptom.
func (c *SymptomClient) Update() *SymptomUpdate {
	mutation := newSymptomMutation(c.config, OpUpdate)
	return &SymptomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SymptomClient) UpdateOne(s *Symptom) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptom(s))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SymptomClient) UpdateOneID(id int) *SymptomUpdateOne {
	mutation := newSymptomMutation(c.config, OpUpdateOne, withSymptomID(id))
	return &SymptomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Symptom.
func (c *SymptomClient) Delete() *SymptomDelete {
	mutation := newSymptomMutation(c.config, OpDelete)
	return &SymptomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SymptomClient) DeleteOne(s *Symptom) *SymptomDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SymptomClient) DeleteOneID(id int) *SymptomDeleteOne {
	builder := c.Delete().Where(symptom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SymptomDeleteOne{builder}
}

// Query returns a query builder for Symptom.
func (c *SymptomClient) Query() *SymptomQuery {
	return &SymptomQuery{
		config: c.config,
	}
}

// Get returns a Symptom entity by its id.
func (c *SymptomClient) Get(ctx context.Context, id int) (*Symptom, error) {
	return c.Query().Where(symptom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SymptomClient) GetX(ctx context.Context, id int) *Symptom {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SymptomClient) Hooks() []Hook {
	return c.hooks.Symptom
}
