// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/bjornaer/sympton-checker/ent/ailment"
	"github.com/bjornaer/sympton-checker/ent/predicate"
	"github.com/bjornaer/sympton-checker/ent/schema"
	"github.com/bjornaer/sympton-checker/ent/symptom"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAilment = "Ailment"
	TypeSymptom = "Symptom"
)

// AilmentMutation represents an operation that mutates the Ailment nodes in the graph.
type AilmentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	symptoms      *map[string]schema.SymptomDetails
	hpos          *[]string
	expert        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Ailment, error)
	predicates    []predicate.Ailment
}

var _ ent.Mutation = (*AilmentMutation)(nil)

// ailmentOption allows management of the mutation configuration using functional options.
type ailmentOption func(*AilmentMutation)

// newAilmentMutation creates new mutation for the Ailment entity.
func newAilmentMutation(c config, op Op, opts ...ailmentOption) *AilmentMutation {
	m := &AilmentMutation{
		config:        c,
		op:            op,
		typ:           TypeAilment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAilmentID sets the ID field of the mutation.
func withAilmentID(id int) ailmentOption {
	return func(m *AilmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Ailment
		)
		m.oldValue = func(ctx context.Context) (*Ailment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ailment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAilment sets the old Ailment of the mutation.
func withAilment(node *Ailment) ailmentOption {
	return func(m *AilmentMutation) {
		m.oldValue = func(context.Context) (*Ailment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AilmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AilmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ailment entities.
func (m *AilmentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AilmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AilmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ailment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AilmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AilmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ailment entity.
// If the Ailment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AilmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AilmentMutation) ResetName() {
	m.name = nil
}

// SetSymptoms sets the "symptoms" field.
func (m *AilmentMutation) SetSymptoms(md map[string]schema.SymptomDetails) {
	m.symptoms = &md
}

// Symptoms returns the value of the "symptoms" field in the mutation.
func (m *AilmentMutation) Symptoms() (r map[string]schema.SymptomDetails, exists bool) {
	v := m.symptoms
	if v == nil {
		return
	}
	return *v, true
}

// OldSymptoms returns the old "symptoms" field's value of the Ailment entity.
// If the Ailment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AilmentMutation) OldSymptoms(ctx context.Context) (v map[string]schema.SymptomDetails, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymptoms is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymptoms requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymptoms: %w", err)
	}
	return oldValue.Symptoms, nil
}

// ResetSymptoms resets all changes to the "symptoms" field.
func (m *AilmentMutation) ResetSymptoms() {
	m.symptoms = nil
}

// SetHpos sets the "hpos" field.
func (m *AilmentMutation) SetHpos(s []string) {
	m.hpos = &s
}

// Hpos returns the value of the "hpos" field in the mutation.
func (m *AilmentMutation) Hpos() (r []string, exists bool) {
	v := m.hpos
	if v == nil {
		return
	}
	return *v, true
}

// OldHpos returns the old "hpos" field's value of the Ailment entity.
// If the Ailment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AilmentMutation) OldHpos(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHpos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHpos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHpos: %w", err)
	}
	return oldValue.Hpos, nil
}

// ResetHpos resets all changes to the "hpos" field.
func (m *AilmentMutation) ResetHpos() {
	m.hpos = nil
}

// SetExpert sets the "expert" field.
func (m *AilmentMutation) SetExpert(s string) {
	m.expert = &s
}

// Expert returns the value of the "expert" field in the mutation.
func (m *AilmentMutation) Expert() (r string, exists bool) {
	v := m.expert
	if v == nil {
		return
	}
	return *v, true
}

// OldExpert returns the old "expert" field's value of the Ailment entity.
// If the Ailment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AilmentMutation) OldExpert(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpert: %w", err)
	}
	return oldValue.Expert, nil
}

// ResetExpert resets all changes to the "expert" field.
func (m *AilmentMutation) ResetExpert() {
	m.expert = nil
}

// Where appends a list predicates to the AilmentMutation builder.
func (m *AilmentMutation) Where(ps ...predicate.Ailment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AilmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ailment).
func (m *AilmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AilmentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, ailment.FieldName)
	}
	if m.symptoms != nil {
		fields = append(fields, ailment.FieldSymptoms)
	}
	if m.hpos != nil {
		fields = append(fields, ailment.FieldHpos)
	}
	if m.expert != nil {
		fields = append(fields, ailment.FieldExpert)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AilmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ailment.FieldName:
		return m.Name()
	case ailment.FieldSymptoms:
		return m.Symptoms()
	case ailment.FieldHpos:
		return m.Hpos()
	case ailment.FieldExpert:
		return m.Expert()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AilmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ailment.FieldName:
		return m.OldName(ctx)
	case ailment.FieldSymptoms:
		return m.OldSymptoms(ctx)
	case ailment.FieldHpos:
		return m.OldHpos(ctx)
	case ailment.FieldExpert:
		return m.OldExpert(ctx)
	}
	return nil, fmt.Errorf("unknown Ailment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AilmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ailment.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ailment.FieldSymptoms:
		v, ok := value.(map[string]schema.SymptomDetails)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymptoms(v)
		return nil
	case ailment.FieldHpos:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHpos(v)
		return nil
	case ailment.FieldExpert:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpert(v)
		return nil
	}
	return fmt.Errorf("unknown Ailment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AilmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AilmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AilmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ailment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AilmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AilmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AilmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ailment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AilmentMutation) ResetField(name string) error {
	switch name {
	case ailment.FieldName:
		m.ResetName()
		return nil
	case ailment.FieldSymptoms:
		m.ResetSymptoms()
		return nil
	case ailment.FieldHpos:
		m.ResetHpos()
		return nil
	case ailment.FieldExpert:
		m.ResetExpert()
		return nil
	}
	return fmt.Errorf("unknown Ailment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AilmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AilmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AilmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AilmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AilmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AilmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AilmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Ailment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AilmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Ailment edge %s", name)
}

// SymptomMutation represents an operation that mutates the Symptom nodes in the graph.
type SymptomMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	hpo           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Symptom, error)
	predicates    []predicate.Symptom
}

var _ ent.Mutation = (*SymptomMutation)(nil)

// symptomOption allows management of the mutation configuration using functional options.
type symptomOption func(*SymptomMutation)

// newSymptomMutation creates new mutation for the Symptom entity.
func newSymptomMutation(c config, op Op, opts ...symptomOption) *SymptomMutation {
	m := &SymptomMutation{
		config:        c,
		op:            op,
		typ:           TypeSymptom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSymptomID sets the ID field of the mutation.
func withSymptomID(id int) symptomOption {
	return func(m *SymptomMutation) {
		var (
			err   error
			once  sync.Once
			value *Symptom
		)
		m.oldValue = func(ctx context.Context) (*Symptom, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Symptom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSymptom sets the old Symptom of the mutation.
func withSymptom(node *Symptom) symptomOption {
	return func(m *SymptomMutation) {
		m.oldValue = func(context.Context) (*Symptom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SymptomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SymptomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SymptomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SymptomMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Symptom.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SymptomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SymptomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Symptom entity.
// If the Symptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SymptomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SymptomMutation) ResetName() {
	m.name = nil
}

// SetHpo sets the "hpo" field.
func (m *SymptomMutation) SetHpo(s string) {
	m.hpo = &s
}

// Hpo returns the value of the "hpo" field in the mutation.
func (m *SymptomMutation) Hpo() (r string, exists bool) {
	v := m.hpo
	if v == nil {
		return
	}
	return *v, true
}

// OldHpo returns the old "hpo" field's value of the Symptom entity.
// If the Symptom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SymptomMutation) OldHpo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHpo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHpo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHpo: %w", err)
	}
	return oldValue.Hpo, nil
}

// ResetHpo resets all changes to the "hpo" field.
func (m *SymptomMutation) ResetHpo() {
	m.hpo = nil
}

// Where appends a list predicates to the SymptomMutation builder.
func (m *SymptomMutation) Where(ps ...predicate.Symptom) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SymptomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Symptom).
func (m *SymptomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SymptomMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, symptom.FieldName)
	}
	if m.hpo != nil {
		fields = append(fields, symptom.FieldHpo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SymptomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case symptom.FieldName:
		return m.Name()
	case symptom.FieldHpo:
		return m.Hpo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SymptomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case symptom.FieldName:
		return m.OldName(ctx)
	case symptom.FieldHpo:
		return m.OldHpo(ctx)
	}
	return nil, fmt.Errorf("unknown Symptom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SymptomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case symptom.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case symptom.FieldHpo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHpo(v)
		return nil
	}
	return fmt.Errorf("unknown Symptom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SymptomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SymptomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SymptomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Symptom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SymptomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SymptomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SymptomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Symptom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SymptomMutation) ResetField(name string) error {
	switch name {
	case symptom.FieldName:
		m.ResetName()
		return nil
	case symptom.FieldHpo:
		m.ResetHpo()
		return nil
	}
	return fmt.Errorf("unknown Symptom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SymptomMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SymptomMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SymptomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SymptomMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SymptomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SymptomMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SymptomMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Symptom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SymptomMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Symptom edge %s", name)
}
